---
- name: Include source module vars
  include_vars:
    file: "dfg/{{ dfg }}.yml"

- name: "create {{ container_images_packages_dir }} to keep the docker build context"
  become: true
  file:
      path: "{{ container_images_packages_dir }}"
      state: "{{ item }}"
  with_items:
      - absent
      - directory

- name: "create {{ container_images_packages_logdir }} to keep the logs"
  become: true
  file:
      path: "{{ container_images_packages_logdir }}"
      state: "{{ item }}"
  with_items:
      - absent
      - directory

- name: Generate coveragerc configuration file
  template:
    dest: "{{ container_images_packages_dir }}/coveragerc"
    src: my.coveragerc.j2
    mode: 0644

- name: Copy sitecustomize.py
  copy:
    dest: "{{ container_images_packages_dir }}/sitecustomize.py"
    src: sitecustomize.py
    mode: 0644

- name: tag the original image(s) with 'before_packages_install' and install rpms&push new ones
  become: true
  shell: |
      set -o errexit

      ORIG_USER="$( docker run --rm {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }} /usr/bin/bash -c "echo -n \$(id -u --name)" )"

      # tag the original container image with 'before_packages_install'
      docker tag {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }} \
      {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }}-before_packages_install

      # install coverage tool and required packages in the image
      echo "
      FROM {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }}
      USER root
      # install rhos release
      RUN curl -k -L https://url.corp.redhat.com/rhos-release-latest-rpm --output rhos-release-latest.rpm && \
          yum install rhos-release-latest.rpm -y && \
          /usr/bin/rhos-release {{ os_version }}
      # install coverage tool
      RUN yum install yum-utils python-devel -y && \
          easy_install pip && \
          pip install coverage && \
          mkdir -m 777 /coverage

      # copy configurations file
      COPY coveragerc /coverage/.coveragerc
      # copy sitecustomize file to modify python processes to start with coverage
      COPY sitecustomize.py /lib/python2.7/site-packages/sitecustomize.py

      ARG ORIG_USER
      USER $ORIG_USER
      " > {{ container_images_packages_dir }}/Dockerfile

      docker build --network=host -t {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }} \
      {{ container_images_packages_dir }} \
      --build-arg ORIG_USER=$ORIG_USER \
      > {{ container_images_packages_logdir }}/docker_build_{{ item }}.log

      if ! grep -q "Complete!" "{{ container_images_packages_logdir }}/docker_build_{{ item }}.log" ; then
          echo -e "\n\nno packages installed!!!\n\n." >&2
          exit 2
      fi

      # push the patched container image in place of the original
      docker push {{ docker_registry_undercloud }}/{{ container_image['basereg_relative'] }}/{{ container_env['container-image-prepare']['prefix'] }}{{ item }}:{{ container_env['container-image-prepare']['tag'] }}
  with_items: "{{ dfg_containers }}"
